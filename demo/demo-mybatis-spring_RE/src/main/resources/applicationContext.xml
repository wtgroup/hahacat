<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="
						http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
						http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
						http://www.springframework.org/schema/data/jpa
						http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">


    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            整合c3p0连接池
        -->
    <!--1. 准备连接池配置参数(properties文件)-->
    <!--2. 读取配置文件-->
    <context:property-placeholder location="classpath:jdbc.mysql.properties"/>
    <!--3. 配置生成c3p0bean, 引入读取的配置参数-->
    <bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.mysql.driverClass}"/>
        <property name="jdbcUrl" value="${jdbc.mysql.jdbcUrl}"/>
        <property name="user" value="${jdbc.mysql.user}"/>
        <property name="password" value="${jdbc.mysql.password}"/>
    </bean>


    <!--
    整合mybatis-->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--注入mybatis核心配置文件位置-->
        <property name="configLocation" value="classpath:SqlMapConfig.xml"/>
    </bean>




    <!--基于动态代理-->
    <!--<bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">-->
        <!--&lt;!&ndash;需要sqlSessionFactory来创建session&ndash;&gt;-->
        <!--<property name="sqlSessionFactory" ref="sqlSessionFactoryBean"/>-->
        <!--&lt;!&ndash;注入接口, 以便根据此接口穿件动态代理对象&ndash;&gt;-->
        <!--<property name="mapperInterface" value="x01_mybatis_spring.mapper.UserMapper"/>-->

    <!--</bean>-->


    <!--基于动态代理-增强版-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--自动注入, 无需配置-->
        <!--<property name="sqlSessionFactory" ref="sqlSessionFactoryBean"/>-->
        <!--无需每个都配置, 配置扫描即可-->
        <property name="basePackage" value="x01_mybatis_spring.mapper"/>
    </bean>

    <!--&lt;!&ndash;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
        <!--spring整合JPA  配置jpa的工厂-->
    <!--&ndash;&gt;-->
    <!--<bean name="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">-->

        <!--&lt;!&ndash;引入外部dataSource, 替换原有的四项参数&ndash;&gt;-->
        <!--<property name="dataSource" ref="dataSource"/>-->

        <!--&lt;!&ndash;指定持久层提供者  hibernate&ndash;&gt;-->
        <!--<property name="persistenceProvider">-->
            <!--<bean class="org.hibernate.ejb.HibernatePersistence"/>-->
        <!--</property>-->

        <!--&lt;!&ndash;JPA提供者适配器-->
        <!--=> 用来适配不同JPA提供者 可见spring不止打算只封装hibernate一家jpa技术&ndash;&gt;-->
        <!--<property name="jpaVendorAdapter">-->
            <!--<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">-->
                <!--&lt;!&ndash; 自动建表 &ndash;&gt;-->
                <!--<property name="generateDdl" value="true"/>-->
                <!--<property name="showSql" value="true"/>-->

                <!--&lt;!&ndash;指定具体的数据库&ndash;&gt;-->
                <!--<property name="database" value="MYSQL"/>-->
                <!--&lt;!&ndash;<property name="databasePlatform" value="org.hibernate.dialect.Oracle10gDialect"/>&ndash;&gt;-->
                <!--<property name="databasePlatform"-->
                          <!--value="org.hibernate.dialect.MySQLDialect"/>  &lt;!&ndash;MySQLInnoDBDialect&ndash;&gt;-->
            <!--</bean>-->
        <!--</property>-->

        <!--&lt;!&ndash;指定JPA方言-->
        <!--!EntityManager本身没有这个属性, 而是继承父类AbstractEntityManagerFactoryBean的-->
        <!--setJpaDialect(JpaDialect jpaDialect)将这个属性设置给了父类, 供父类的方法使用!&ndash;&gt;-->
        <!--<property name="jpaDialect">-->
            <!--<bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect"/>-->
        <!--</property>-->


        <!--&lt;!&ndash; 扫描实体类所在的包 &ndash;&gt;-->
        <!--<property name="packagesToScan" value="com.wtgroup.domain.entity"/>-->

    <!--</bean>-->

    <!--&lt;!&ndash;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->
        <!--配置spring的事务管理器  (不再使用hibernate的事务管理器)-->
    <!--&ndash;&gt;-->
    <!--&lt;!&ndash;配置hibernate事务管理者&ndash;&gt;-->
    <!--<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">-->
        <!--<property name="entityManagerFactory" ref="entityManagerFactory"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash;-->
        <!--开启事务注解支持-->
    <!--&ndash;&gt;-->
    <!--<tx:annotation-driven transaction-manager="transactionManager"/>-->


    <!--
        开启注解
    -->
    <!-- 组件扫描 @Server @Controller @Repository 不用管domain, 因为domain已经让jpa管理了-->
    <!--每个层单独配置分applicationContext.xml文件, 只管自己模块里的包扫描-->
    <!--<context:component-scan base-package="com.sykd.bos.service, .."/>-->


    <!-- 整合 spring data jpa
        有了这个, 只需要在dao层用结合继承内置父类和注解的方式实现简化数据库操作-->
    <!--<jpa:repositories base-package="com.sykd.bos.dao"/>-->





</beans>
