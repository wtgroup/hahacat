<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace：命名空间，用于隔离sql，还有一个很重要的作用: 绑定接口, 实现mapper东塔代理 -->
<mapper namespace="x01_mybatis_test.mapper.UserMapper">

    <!--
    1. id: sql语句ID用来定位那条语句
    2. parameterType: 指定注入的参数类型
    3. resultType: 指定结果映射的bean, 这样才能封装结果集  自动封装  resultMap:手动封装
    4. SQL语句: 重要的是占位符-->
    <!--<select id="findUserById" parameterType="int" resultType="x01_mybatis_test.bean.User">-->
        <!--SELECT * FROM `user` WHERE id  = #{id}-->
    <!--</select>-->

    <select id="findUserById" parameterType="x01_mybatis_test.bean.User" resultType="x01_mybatis_test.pageBeanName.User">
        SELECT * FROM `user` WHERE id  = #{id}
    </select>


    <select id="findUserUsername" parameterType="String" resultType="x01_mybatis_test.bean.User">
        SELECT * FROM `user` WHERE username like "%"'${value}'"%"
    </select>


    <insert id="addUser" parameterType="x01_mybatis_test.bean.User" >
        INSERT INTO `user` (username,birthday,sex) VALUES(#{username},#{birthday},#{sex})
    </insert>

    <!--保存记录之后返回其自增得到的ID-->
    <insert id="addUser1" parameterType="x01_mybatis_test.bean.User" >
      <selectKey keyProperty="id" resultType="Integer" order="AFTER">
          SELECT LAST_INSERT_ID()
      </selectKey>
        INSERT INTO `user` (username,birthday,sex) VALUES(#{username},#{birthday},#{sex})
    </insert>

    <update id="updateUser" parameterType="x01_mybatis_test.bean.User" >
        update `user` SET
        username=#{username},sex=#{sex},birthday=#{birthday}
        WHERE id=#{id}
    </update>


    <!--测试别名-->
    <select id="findUserById_alias" parameterType="User" resultType="x01_mybatis_test.bean.User">
        SELECT * FROM `user` WHERE id  = #{id}
    </select>

    <select id="findUser" parameterType="User" resultType="x01_mybatis_test.bean.User">
        SELECT * FROM `user` WHERE id  = #{id} or username=#{username}
    </select>

    <!--根据包装类查询-->
    <!--
    入参换成包装类
    出参不变-->
    <select id="findUserByVo" parameterType="QueryVo" resultType="x01_mybatis_test.bean.User">
        SELECT * FROM `user` WHERE id  = #{user.id} or username=#{user.username}
    </select>


    <!--查询总记录数-->
    <select id="countUser" resultType="Integer">
        <!--SELECT count(*) from `user`
        or: count(anything)-->
        SELECT count(1) from `user`

    </select>


    <!--
    动态SQL-where标签
        智能去除语句中第一条件前AND
    -->
    <select id="findByIdAndUsername" parameterType="User" resultType="User">
        <include refid="selector"></include>
        <where>
            <if test="id != null">
                and id=#{id}
            </if>
            <if test="username!=null and username!=''">
                and username = #{username}
            </if>
        </where>
    </select>

    <!--
    SQL片段-->
    <sql id="selector">
      SELECT * from `USER`
    </sql>

    <!--
    foreach标签使用-->
    <select id="findByVoIdlist" parameterType="QueryVo" resultType="User">
        <include refid="selector"/>
        WHERE id in
        <foreach collection="idlist" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </select>

    <select id="findByVoIdarray" parameterType="QueryVo" resultType="User">
        <include refid="selector"/>
        WHERE id in
        <foreach collection="idarray" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </select>

    <select id="findByIdlist" resultType="User">
        <include refid="selector"/>
        WHERE id in
        <foreach collection="list" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </select>

    <select id="findByIdarray" resultType="User">
        <include refid="selector"/>
        WHERE id in
        <foreach collection="array" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </select>


</mapper>
